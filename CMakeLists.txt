cmake_minimum_required(VERSION 3.6)
project(Pokemon_Strategy_Tool)

# Don't allow to build in sources otherwise a makefile not generated by CMake can be overrided
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

# By default build in Release mode
if( NOT CMAKE_BUILD_TYPE )
	set(CMAKE_BUILD_TYPE "Release")
endif()

include(CheckCSourceRuns)
include(CheckIncludeFiles)

# Some defines depending of the OS
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	set(OS_WINDOWS 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(OS_LINUX 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(OS_MACOSX 1)
else()
	message(FATAL_ERROR "Unsupported operating system")
endif()

# gcc configuration
if(CMAKE_COMPILER_IS_GNUCXX)
	set(GCC_EXPECTED_VERSION 4.7.1)

	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS GCC_EXPECTED_VERSION)
		message(FATAL_ERROR "GCC: Project requires version ${GCC_EXPECTED_VERSION} to build but found ${CMAKE_CXX_COMPILER_VERSION}")
	endif()

	message(STATUS "Found GCC ${CMAKE_CXX_COMPILER_VERSION}")

	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
	message(STATUS "gcc: Enabled c11 support")

	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic -Wall -Wcast-align -Wcast-qual -Wconversion -Wdisabled-optimization -Wdouble-promotion -Wextra -Wfloat-equal -Wformat -Winit-self -Winvalid-pch -Wlogical-op -Wmain -Wmissing-declarations -Wmissing-include-dirs -Wpointer-arith -Wredundant-decls -Wshadow -Wswitch-default -Wswitch-enum -Wundef -Wuninitialized -Wunreachable-code -Wwrite-strings -Os -D__NO_INLINE__")
	message(STATUS "GCC: Enabled warnings")

	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g")

	set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -s -Os")

	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s -O2")
endif()

# includes
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/include/
)

# sources
message(STATUS "Sources preparation")
file(GLOB_RECURSE SOURCE_FILES
  "${CMAKE_CURRENT_SOURCE_DIR}/src/*"
  )
message("	-> Sources prepared")

# compilation target
add_executable(
  Pokemon_Strategy_Tool
  ${SOURCE_FILES}
)
